#include "utils.h"

/*
TIMECODE        {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x00, 0x80, 0x00, 0x50, 0xdb, 0x8f, 0xc4, 0x49, 0x47};

RESOLUME        {0x88, 0xfa, 0x20, 0x99, 0xac, 0x7a, 0x4f, 0x3f, 0xbc, 0x16, 0xa9, 0x95, 0xdb, 0xda, 0x2a, 0x42};

SOUNDSWITCH(1)  {0x52, 0xfd, 0xfc, 0x07, 0x21, 0x82, 0x65, 0x4f, 0x16, 0x3f, 0x5f, 0x0f, 0x9a, 0x62, 0x1d, 0x72};
SC6k            {0x26, 0xd2, 0x38, 0x67, 0x1c, 0xd6, 0x4e, 0x3f, 0x80, 0xa1, 0x11, 0x82, 0x6a, 0xc4, 0x11, 0x20};

mySSwitch       {0xff, 0xff, 0xff, 0xff, 0x91, 0x06, 0x4a, 0x1c, 0x9b, 0xba, 0x88, 0xb4, 0xbe, 0x19, 0xa3, 0xd1}
mysc6k1         {0x4B, 0xE1, 0x41, 0x12, 0x5E, 0xAD, 0x48, 0x48, 0xA0, 0x7D, 0xB3, 0x7C, 0xA8, 0xA7, 0x22, 0x0E}
ol1             {0x62, 0x0B, 0xAA, 0x1A, 0x53, 0xEC, 0x4F, 0x2C, 0xAD, 0xBC, 0x9B, 0x3C, 0x32, 0x96, 0xCD, 0x57}
ol2             {0x03, 0x22, 0xD5, 0xE2, 0x59, 0xF4, 0x42, 0x78, 0x9E, 0x9D, 0x61, 0x33, 0xCF, 0x8B, 0x62, 0x95}
*/

uint8_t DEVICE_ID[16] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x00, 0x80, 0x00, 0x50, 0xdb, 0x8f, 0xc4, 0x49, 0x47};
uint8_t ZERO_DEVICE_ID[16] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
unsigned int beatMsgCount = 0;

void printDeviceIDTo(deviceid_t _id, char * target) {
  sprintf(target, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-%02x%02x%02x%02x%02x%02x",_id.data[0],_id.data[1],_id.data[2],_id.data[3],_id.data[4],_id.data[5],_id.data[6],_id.data[7],_id.data[8],_id.data[9],_id.data[10],_id.data[11],_id.data[12],_id.data[13],_id.data[14],_id.data[15]);
}


std::set<uint16_t> ports;

uint16_t randomPort() {
   bool portOK = false;
   uint16_t randPort;
   do {
      randPort = random(49152, 65533);

   } while (ports.find(randPort) != ports.end());
    ports.insert(randPort);
    return randPort;
}

#define LONGBITS (sizeof (size_t) * CHAR_BIT)

unsigned long getHash (const void *key, size_t keylen) {
  size_t cnt;
  unsigned long int hval;
  cnt = 0;
  hval = keylen;
  while (cnt < keylen)
    {
      hval = (hval << 9) | (hval >> (LONGBITS - 9));
      hval += (unsigned long int) *(((char *) key) + cnt++);
    }
  return hval != 0 ? hval : ~((unsigned long) 0);
}

size_t stringLength(char * str) {
    char *e;
    int index;
    e = strchr(str, '\0');
    index = (int)(e - str);
    return index;
}